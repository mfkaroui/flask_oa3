from __future__ import annotations
from typing import Annotated, Optional, ClassVar
from enum import StrEnum
from pydantic import Field, AnyUrl, validator

from .component import Component, ComponentType
from .xml import XML
from .oauth_flows import OAuthFlows

class SecuritySchemeType(StrEnum):
    HTTP = "http"
    API_KEY = "apiKey"
    MUTUAL_TLS = "mutualTLS"
    OAUTH2 = "oauth2"
    OPEN_ID_CONNECT = "openIdConnect"

class SecuritySchemeLocation(StrEnum):
    QUERY = "query" #Parameters that are appended to the URL. For example, in /items?id=###, the query parameter is id.
    HEADER = "header" #Custom headers that are expected as part of the request. Note that [RFC7230] states header names are case insensitive.
    COOKIE = "cookie" #Used to pass a specific cookie value to the API.

class HTTPAuthenticationScheme(StrEnum):
    """
    Spec:

    https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml
    """
    BASIC = "Basic"
    BEARER = "Bearer"
    DIGEST = "Digest"
    DPOP = "DPoP"
    HOBA = "HOBA"
    MUTUAL = "Mutual"
    NEGOTIATE = "Negotiate"
    OAUTH = "OAuth"
    PRIVATE_TOKEN = "PrivateToken"
    SCRAM_SHA_1 = "SCRAM-SHA-1"
    SCRAM_SHA_256 = "SCRAM-SHA-256"
    VAPID = "vapid"

class SecurityScheme(Component):
    component_type: ClassVar[ComponentType] = ComponentType.SECURITY_SCHEME

    security_scheme_type: Annotated[SecuritySchemeType, Field(description="REQUIRED. The type of the security scheme. Valid values are \"apiKey\", \"http\", \"mutualTLS\", \"oauth2\", \"openIdConnect\".")]
    description: Annotated[Optional[str], Field(default=None, description="A description for security scheme. CommonMark syntax MAY be used for rich text representation.")]
    name: Annotated[Optional[str], Field(default=None, description="REQUIRED. The name of the header, query or cookie parameter to be used.")]
    in_location: Annotated[Optional[str], Field(default=None, alias="in", description="REQUIRED. The location of the API key. Valid values are \"query\", \"header\" or \"cookie\".")]
    scheme: Annotated[Optional[HTTPAuthenticationScheme], Field(default=None, description="REQUIRED. The name of the HTTP Authorization scheme to be used in the Authorization header as defined in [RFC7235]. The values used SHOULD be registered in the IANA Authentication Scheme registry")]
    bearer_format: Annotated[Optional[str], Field(default=None, description="A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.")]
    flows: Annotated[Optional[OAuthFlows], Field(default=None, description="REQUIRED. An object containing configuration information for the flow types supported.")]
    open_id_connect_url: Annotated[Optional[AnyUrl], Field(default=None, alias="openIdConnectUrl", description="REQUIRED. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL. The OpenID Connect standard requires the use of TLS.")]

    @validator('security_scheme_type', pre=True, always=True)
    def check_type(cls, v):
        if not isinstance(v, SecuritySchemeType):
            raise ValueError('The type of the security scheme is required and must be an instance of SecuritySchemeType.')
        return v

    @validator('description')
    def check_description(cls, v):
        if v is not None and not isinstance(v, str):
            raise ValueError('The description must be a string.')
        return v

    @validator('name', 'in_location', always=True)
    def check_api_key(cls, v, values, **kwargs):
        if 'security_scheme_type' in values and values['security_scheme_type'] == SecuritySchemeType.API_KEY:
            if not v:
                raise ValueError('The name and in_location fields are required when security_scheme_type is API_KEY.')
        return v

    @validator('scheme', always=True)
    def check_http(cls, v, values, **kwargs):
        if 'security_scheme_type' in values and values['security_scheme_type'] == SecuritySchemeType.HTTP:
            if not v:
                raise ValueError('The scheme field is required when security_scheme_type is HTTP.')
        return v

    @validator('bearer_format')
    def check_bearer(cls, v, values, **kwargs):
        if 'scheme' in values and values['scheme'] == 'Bearer':
            if v is not None and not isinstance(v, str):
                raise ValueError('The bearerFormat must be a string when scheme is Bearer.')
        return v

    @validator('flows', always=True)
    def check_oauth2(cls, v, values, **kwargs):
        if 'security_scheme_type' in values and values['security_scheme_type'] == SecuritySchemeType.OAUTH2:
            if not isinstance(v, OAuthFlows):
                raise ValueError('The flows field is required and must be an instance of OAuthFlows when security_scheme_type is OAUTH2.')
        return v

    @validator('open_id_connect_url', always=True)
    def check_open_id_connect(cls, v, values, **kwargs):
        if 'security_scheme_type' in values and values['security_scheme_type'] == SecuritySchemeType.OPEN_ID_CONNECT:
            if not v:
                raise ValueError('The openIdConnectUrl field is required when security_scheme_type is OPEN_ID_CONNECT.')
        return v

    @validator('open_id_connect_url', always=True)
    def check_open_id_connect(cls, v, values, **kwargs):
        if 'security_scheme_type' in values and values['security_scheme_type'] == SecuritySchemeType.OPEN_ID_CONNECT:
            if not v:
                raise ValueError('The openIdConnectUrl field is required when security_scheme_type is OPEN_ID_CONNECT.')
        return v

    @property
    def oa3_schema(self):
        """Constructs the Open API 'Security Scheme Object' according to specifications
        
        Spec:
            https://spec.openapis.org/oas/v3.1.0#securitySchemeObject
        
        Returns:
            dict: The Open API schema
        
        Notes:
            if "$defs" is defined then they must be popped out and ensured that they exist in the components object
        """   
        return self.model_dump(mode="json", by_alias=True, exclude_none=True)
